<?php
/*
 * Command line tools for OnMyShelf
 */

class Cmd
{
    /**
     * Cleanup database
     * @return void
     */
    public static function cleanup()
    {
        $db = new Database();

        echo "Cleanup expired tokens...\n";
        $db->cleanupTokens();

        echo "Cleanup unused medias...\n";
        
        $medias = Storage::glob('*/*');
        foreach ($medias as $media) {
            // ignore thumbnails
            if (preg_match('/-normal(\.|$)/', $media)) {
                continue;
            }
            if (preg_match('/-small(\.|$)/', $media)) {
                continue;
            }

            // if media is never referened into DB
            if (!$db->mediaExists($media)) {
                // delete media
                Storage::delete($media);

                // search and delete thumbnails
                $thumbnails = Storage::getThumbnails($media);
                foreach ($thumbnails as $thumbnail) {
                    Storage::delete($thumbnail);
                }
            }
        }

        echo "Cleanup finished.\n";
    }


    /**
     * Install OnMyShelf
     * @return void
     */
    public static function install()
    {
        $db = new Database();

        // get current version
        try {
            $version = $db->getConfig('version');
        } catch (Throwable $t) {
            // if failed, then probably the database is empty
            $version = false;
        }

        if ($version) {
            echo "\nOnMyShelf is already installed";
        } else {
            echo "Initialize database structure...";
            // WARN: we need to call a separate Database instance here
            if (!(new Database)->install()) {
                echo " FAILED! (see log file for more details)\n";
                exit(1);
            }

            // create default user
            if (!$db->getUserByLogin("onmyshelf")) {
                echo "\nCreate default user...";
                if (!$db->createUser(['username' => 'onmyshelf', 'password' => 'onmyshelf'])) {
                    echo " FAILED! (see log file for more details)\n";
                    exit(1);
                }
            }

            echo "\nInitialize database content...";
            if (!$db->init()) {
                echo " FAILED! (see log file for more details)";
            }

            echo "\nOnMyShelf is ready!";
        }

        echo "\n\n";
    }


    /**
     * Upgrade OnMyShelf
     * @return void
     */
    public static function upgrade()
    {
        // get current version
        $currentVersion = Config::get('version');

        if (!$currentVersion) {
            echo "ERROR: cannot get current version!\n";
            exit(1);
        }

        // run upgrade
        if (!Config::compareVersions(VERSION, $currentVersion)) {
            echo "OnMyShelf is already up-to-date\n\n";
            return;
        }

        // get new version without build number
        $newVersion = preg_replace('/\+.*/', '', VERSION);

        echo "Upgrading from $currentVersion to $newVersion...\n";

        echo "Upgrade database structure...\n";
        // WARN: we need to call a separate Database instance here
        if (!(new Database)->install()) {
            echo " FAILED! (see log file for more details)\n";
            exit(1);
        }

        // upgrade to new version
        $db = new Database();
        if (!$db->upgrade($newVersion)) {
            echo "FAILED! (see log file for more details)\n";
            exit(1);
        }

        echo "\nInitialize database content...";
        if ($db->init()) {
            echo "\n";
        } else {
            echo " FAILED! (see log file for more details)\n";
        }

        echo "\nUpgrade external modules...\n";
        Module::upgrade();
        echo "\n";
    }


    /**
     * Print help
     * @return void
     */
    public static function help($command=null)
    {
        if ($command) {
            $cmd = $command;
        } else {
            $cmd = 'COMMAND';
        }

        echo "Usage: php bin/oms $cmd\n";

        if (is_null($command)) {
            echo "\nAvailable commands:\n";
            foreach (get_class_methods('Cmd') as $f) {
                echo "   $f\n";
            }
        }

        echo "\n";

        switch ($command) {
            case 'cleanup':
                echo "Cleanup database and files";
                break;

            case 'install':
                echo "Installs OnMyShelf";
                break;

            case 'upgrade':
                echo "Upgrades OnMyShelf to the last version";
                break;

            case '':
                break;

            default:
                echo "Command '$command' does not exists.\n";
                echo "Type 'oms help' to see available commands.";
                break;
        }

        echo "\n";
    }
}

if (count($argv) < 2) {
    Cmd::help();
    exit(1);
}

if (!method_exists('Cmd', $argv[1])) {
    echo "ERROR: command not found\n";
    Cmd::help();
    exit(1);
}

require_once('inc/init.php');

// give admin privileges
$GLOBALS['accessRights'] = 4;
$GLOBALS['currentUserID'] = 1;

// calls help
if (isset($argv[2]) && $argv[2] == '--help') {
    Cmd::help($argv[1]);
    exit();
}

// call function
call_user_func_array([(new Cmd), $argv[1]], array_slice($argv, 2));
